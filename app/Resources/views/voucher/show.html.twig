{% extends 'base.html.twig' %}

{% block body %}
    <h1>Voucher</h1>

    <table class="table">
        <tbody>
            <tr>
                <th>Estado</th>
                <td>{{ voucher.state }}</td>
            </tr>
            <tr>
                <th>Tipo</th>
                <td>{{ voucher.type }}</td>
            </tr>
            <tr>
                <th>Numero</th>
                <td>{{ voucher.number }}</td>
            </tr>
            <tr>
                <th>Fecha</th>
                <td>{% if voucher.date %}{{ voucher.date|date('d-m-Y') }}{% endif %}</td>
            </tr>
            <tr>
                <th>n items</th>
                <td>{{ voucher.items|length }}</td>
            </tr>
        </tbody>
    </table>

    <ul>
        <li>
            <a href="{{ path('voucher_index') }}">Back to the list</a>
        </li>
        <li>
            <a href="{{ path('voucher_edit', { 'id': voucher.id }) }}">Edit</a>
        </li>
        <li>
            {{ form_start(delete_form) }}
                <input type="submit" value="Delete">
            {{ form_end(delete_form) }}
        </li>
    </ul>

    {{ form_start(itemForm) }}

        <h3>Items</h3>
        <ul class="item">
            {# iterate over each existing item and render its only field: name #}
            {% for item in itemForm.items %}
                <li>{{ form_row(item.number) }}</li>
                <li>{{ form_row(item.credit) }}</li>
                <li>{{ form_row(item.debit) }}</li>
                <li>{{ form_row(item.documentNumber) }}</li>
            {% endfor %}
        </ul>
    {{ form_end(itemForm) }}

    <ul class="items" data-prototype="{{ form_widget(itemForm.items.vars.prototype)|e('html_attr') }}">
        ...
    </ul>

    <script>
        var $collectionHolder;

        // setup an "add a item" link
        var $addItemLink = $('<a href="#" class="add_item_link">Add a item</a>');
        var $newLinkLi = $('<li></li>').append($addItemLink);

        jQuery(document).ready(function() {
            // Get the ul that holds the collection of items
            $collectionHolder = $('ul.items');

            // add the "add a item" anchor and li to the items ul
            $collectionHolder.append($newLinkLi);

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            $collectionHolder.data('index', $collectionHolder.find(':input').length);

            $addItemLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new item form (see next code block)
                addItemForm($collectionHolder, $newLinkLi);
            });
        });

        function addItemForm($collectionHolder, $newLinkLi) {
        // Get the data-prototype explained earlier
        var prototype = $collectionHolder.data('prototype');

        // get the new index
        var index = $collectionHolder.data('index');

        var newForm = prototype;
        // You need this only if you didn't set 'label' => false in your items field in TaskType
        // Replace '__name__label__' in the prototype's HTML to
        // instead be a number based on how many items we have
        // newForm = newForm.replace(/__name__label__/g, index);

        // Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have
        newForm = newForm.replace(/__name__/g, index);

        // increase the index with one for the next item
        $collectionHolder.data('index', index + 1);

        // Display the form in the page in an li, before the "Add a item" link li
        var $newFormLi = $('<li></li>').append(newForm);
        $newLinkLi.before($newFormLi);
    }
    </script>

{% endblock %}
